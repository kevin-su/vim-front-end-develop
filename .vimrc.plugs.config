
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Important:
"       This requires that you install https://github.com/amix/vimrc !
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""
" => Minimap
"
""""""""""""""""""""""""""""""
" au BufEnter * :Minimap
" au BufEnter * :set number
" au BufEnter * :set mouse=a


""""""""""""""""""""""""""""""
" => Foldemethod
"
""""""""""""""""""""""""""""""
let g:fastfold_savehook = 0
let g:javaScript_fold = 1
let g:fastfold_fold_command_suffixes = ['x','X','a','A','o','O','c','C','r','R','m','M','i','n','N']
" filetype plugin indent on " required
" syntax on                 " required

" autocmd Filetype *.js AnyFoldActivate " activate for a specific filetype

" " set foldlevel=0  " close all folds
" " or
" set foldlevel=99 " Open all folds

""""""""""""""""""""""""""""""
" => Load pathogen paths
""""""""""""""""""""""""""""""
" let s:vim_runtime = expand('<sfile>:p:h')."/.."
" call pathogen#infect(s:vim_runtime.'/sources_forked/{}')
" call pathogen#infect(s:vim_runtime.'/sources_non_forked/{}')
" call pathogen#infect(s:vim_runtime.'/my_plugins/{}')
" call pathogen#helptags()


""""""""""""""""""""""""""""""
" => bufExplorer plugin
""""""""""""""""""""""""""""""
let g:bufExplorerDefaultHelp=0
let g:bufExplorerShowRelativePath=1
let g:bufExplorerFindActive=1
let g:bufExplorerSortBy='name'
map <leader>o :BufExplorer<cr>


""""""""""""""""""""""""""""""
" => MRU plugin
""""""""""""""""""""""""""""""
let MRU_Max_Entries = 400
map <leader>f :MRU<CR>


""""""""""""""""""""""""""""""
" => YankStack
""""""""""""""""""""""""""""""
let g:yankstack_yank_keys = ['y', 'd']

nmap <C-p> <Plug>yankstack_substitute_older_paste
nmap <C-n> <Plug>yankstack_substitute_newer_paste


""""""""""""""""""""""""""""""
" => ZenCoding
""""""""""""""""""""""""""""""
" Enable all functions in all modes
let g:user_zen_mode='a'


""""""""""""""""""""""""""""""
" => Vim grep
""""""""""""""""""""""""""""""
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'
set grepprg=/bin/grep\ -nH


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Nerd Tree
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let NERDTreeShowLineNumbers=0
let NERDTreeShowHidden=1
let NERDTreeIgnore = ['\.pyc$', '__pycache__']
let g:NERDTreeWinSize=35
let g:NERDTreeMinimalUI = 1
let g:NERDTreeIgnore = []
let g:NERDTreeStatusline = ''
let NERDTreeChDirMode=2

map <leader>nn :NERDTreeToggle<cr>
map <leader>nb :NERDTreeFromBookmark<Space>
map <leader>nf :NERDTreeFind<cr>

nnoremap <silent> <C-n> :NERDTreeToggle<CR>
set autochdir
nnoremap <leader>n :NERDTree .<CR>

" Refresh NERDTree pane
nmap <leader>nr :NERDTreeFocus<cr> \| R \| <c-w><c-p>
"autocmd CursorHold,CursorHoldI * call NERDTreeFocus() | call g:NERDTree.ForCurrentTab().getRoot().refresh() | call g:NERDTree.ForCurrentTab().render() | wincmd w

" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Automaticaly close nvim if NERDTree is only thing left open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-multiple-cursors
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" let g:multi_cursor_use_default_mapping=0

" " Default mapping
" let g:multi_cursor_start_word_key      = '<C-s>'
" let g:multi_cursor_select_all_word_key = '<A-s>'
" let g:multi_cursor_start_key           = 'g<C-s>'
" let g:multi_cursor_select_all_key      = 'g<A-s>'
" let g:multi_cursor_next_key            = '<C-s>'
" let g:multi_cursor_prev_key            = '<C-p>'
" let g:multi_cursor_skip_key            = '<C-x>'
" let g:multi_cursor_quit_key            = '<Esc>'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => surround.vim config
" Annotate strings with gettext
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vmap Si S(i_<esc>f)
au FileType mako vmap Si S"i${ _(<esc>2f"a) }<esc>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => lightline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ ['mode', 'paste'],
      \             ['fugitive', 'readonly', 'filename', 'modified'] ],
      \   'right': [ [ 'lineinfo' ], ['percent'] ]
      \ },
      \ 'component': {
      \   'readonly': '%{&filetype=="help"?"":&readonly?"ðŸ”’":""}',
      \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
      \   'fugitive': '%{exists("*FugitiveHead")?FugitiveHead():""}'
      \ },
      \ 'component_visible_condition': {
      \   'readonly': '(&filetype!="help"&& &readonly)',
      \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
      \   'fugitive': '(exists("*FugitiveHead") && ""!=FugitiveHead())'
      \ },
      \ 'separator': { 'left': ' ', 'right': ' ' },
      \ 'subseparator': { 'left': ' ', 'right': ' ' }
      \ }

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Vimroom
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:goyo_width=100
let g:goyo_margin_top = 2
let g:goyo_margin_bottom = 2
nnoremap <silent> <leader>z :Goyo<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Git gutter (Git diff)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:gitgutter_enabled=0
nnoremap <silent> <leader>d :GitGutterToggle<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" =Prettier
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Plug 'prettier/vim-prettier', { 'do': 'npm install', 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'yaml', 'html'] }
autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue,*.yaml,*.html PrettierAsync

let g:prettier#exec_cmd_path = '~/.nvm/versions/node/v8.11.2/bin/prettier'
" number of spaces per indentation level: a number or 'auto' (use
" softtabstop)
" default: 'auto'
let g:prettier#config#tab_width = 2
" use tabs instead of spaces: true, false, or auto (use the expandtab setting).
" default: 'auto'
let g:prettier#config#use_tabs = 'false'
let g:prettier#autoformat = 0
let g:prettier#quickfix_enabled = 1
let g:prettier#quickfix_auto_focus = 1

" typescript formatter
" autocmd FileType typescript setlocal formatprg=prettier\ --parser\ typescript
autocmd BufEnter *.{js,jsx,ts,tsx} :syntax sync fromstart
autocmd BufLeave *.{js,jsx,ts,tsx} :syntax sync clear

let b:prettier_ft_default_args = {
  \ 'parser': 'typescript',
  \ }

augroup Prettier
  autocmd!
  autocmd BufWritePre *.ts,*.tsx call prettier#Autoformat()
augroup end


let g:ale_fixers = {
\   'typescript': ['prettier'],
\   'javascript': ['prettier'],
\   'css': ['prettier'],
\   'html': ['prettier']
\}

let g:ale_fix_on_save = 1
let g:prettier#config#single_quote = 'true'
let g:ale_javascript_prettier_options = '--single-quote --trailing-comma none'
" let g:ale_javascript_prettier_options = '--single-quote --trailing-comma none --arrow-parens avoid'

" => Ale (syntax checker and linter)
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <silent> <leader>a <Plug>(ale_next_wrap)

" Disabling highlighting
let g:ale_set_highlights = 0

" Only run linting when saving the file
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_enter = 0


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" =fzf
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" fzf
" Empty value to disable preview window altogether
let g:fzf_preview_window = ''

" Always enable preview window on the right with 60% width
let g:fzf_preview_window = 'right:60%'

" ag vim
let g:ag_working_path_mode="r"
command! -bang -nargs=* Ag
\ call fzf#vim#ag(<q-args>,
\                 <bang>0 ? fzf#vim#with_preview('up:60%')
\                         : fzf#vim#with_preview('right:50%:hidden', '?'),
\                 <bang>0)

nnoremap <C-p> :FZF<CR>
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit'
  \}

" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
" command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob '!.git/*' --color 'always' '.shellescape(<q-args>), 1, <bang>0)

" https://sourcediving.com/better-fuzzy-finding-in-vim-2f1e8597b3b9
nmap <C-P> :FZF<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" =Theme
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! UseThemeTerm()
  colorscheme jellybeans
  let g:jellybeans_use_lowcolor_black = 0

  let g:jellybeans_overrides = {
  \  'Todo': { 'guifg': '303030', 'guibg': 'f0f000',
  \              'ctermfg': 'Black', 'ctermbg': 'Yellow',
  \              'attr': 'bold' },
  \  'Comment': { 'guifg': '999999' },
  \  'background': { 'ctermbg': 'none', '256ctermbg': 'none' },
  \  'MatchParen': { 'guifg': 'dd0093', 'guibg': '000000',
  \                  'ctermfg': 'Magenta', 'ctermbg': '' },
  \  'SpecialKey': { '256ctermbg': 'none', '256ctermfg': 'Darkgray' },
  \  'Whitespace': { '256ctermbg': 'none', '256ctermfg': 'Darkgray' },
  \  'SpellBad'  : { '256cterm': 'underline', '256ctermbg': 'None' },
  \  'SpellCap'  : { '256cterm': 'undercurl', '256ctermbg': 'None' },
  \  'error'     : { '256ctermbg': 236 },
  \  'todo'      : { '256ctermbg': 236 },
  \}

  if has('termguicolors') && &termguicolors
     let g:jellybeans_overrides['background']['guibg'] = 'none'
  endif
endfunction

function! UseThemeGUI()
  colorscheme PaperColor
  " colorscheme gotham256
  " set termguicolors     " enable true colors support
  " let ayucolor="mirage" " for mirage version of theme
  " colorscheme ayu
endfunction

if has('gui_running')
  call UseThemeGUI()
else
  call UseThemeTerm()
  set background=dark
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" =copy and paste
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <silent> <leader>y :WriteToVmuxClipboard<cr>
map <silent> <leader>p :ReadFromVmuxClipboard<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" =SyntaxRange#Include
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://www.reddit.com/r/vim/comments/a53dch/template_string_highlighting/
for language in ['css' ]
    call SyntaxRange#Include(language.'`', '`', language, 'String')
endfor
